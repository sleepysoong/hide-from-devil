# .github/workflows/obfuscate-and-release.yml

name: Obfuscate with PyArmor & Nuitka and Create Release

# 1. GitHub Actions 탭에서 수동으로 워크플로우를 실행할 수 있도록 설정해요.
on:
  workflow_dispatch:

jobs:
  # 각 운영체제(Windows, Ubuntu, macOS)에서 빌드를 진행하는 잡이에요.
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-latest (ARM)에서 빌드가 멈추는 현상이 있어, 한 단계 낮은 ARM 기반의 macos-13으로 변경해요.
        # 이렇게 하면 호환성 문제를 해결하면서 Apple Silicon 빌드를 유지할 수 있어요.
        os: [ubuntu-latest, windows-latest, macos-13]

    steps:
      # 1. 저장소의 코드를 워크플로우 환경으로 가져와요.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Python 환경을 설정해요.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # 프로젝트에 맞는 Python 버전을 사용해야 해요.

      # 3. 필요한 파이썬 패키지들을 설치해요.
      - name: Install dependencies
        # 모든 OS에서 bash를 사용하도록 명시해서 OS별 문법 차이로 인한 오류를 방지해요.
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # PyArmor 버전을 7.7.4로 고정해서 'obfuscate' 명령어를 사용해요.
          pip install "pyarmor==7.7.4" nuitka
          # requirements.txt 파일이 존재할 경우에만 해당 파일로부터 패키지를 설치해요.
          if [ -f "requirements.txt" ]; then
            echo "requirements.txt found. Installing dependencies..."
            pip install -r requirements.txt
          else
            echo "requirements.txt not found. Skipping."
          fi

      # 4. VERSION 파일에서 버전을 읽고, 태그와 아티팩트 파일명을 환경 변수로 설정해요.
      - name: Get Version and Set Names
        id: get_version
        shell: bash
        run: |
          VERSION=$(cat VERSION)
          echo "TAG=v$VERSION" >> $GITHUB_ENV
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "ASSET_NAME=app-${VERSION}-${{ matrix.os }}.exe" >> $GITHUB_ENV
          else
            echo "ASSET_NAME=app-${VERSION}-${{ matrix.os }}" >> $GITHUB_ENV
          fi

      # 5. PyArmor를 사용해서 app.py 파일을 난독화해요.
      # 난독화된 파일은 'dist' 디렉터리에 생성돼요.
      - name: Obfuscate with PyArmor
        run: pyarmor obfuscate app.py

      # 6. Nuitka를 사용해서 PyArmor로 난독화된 파일을 컴파일해요.
      - name: Compile with Nuitka
        shell: bash
        run: |
          cd dist
          # 기본 Nuitka 인자를 설정해요.
          # --include-data-dir 옵션을 추가하여 pytransform 폴더 전체를 포함시켜요.
          # 이렇게 하면 실행 시 필요한 동적 라이브러리(_pytransform.dylib)를 정확히 찾을 수 있어요.
          NUITKA_ARGS="--standalone --onefile --include-data-dir=pytransform=pytransform --output-dir=../build_output --output-filename=${{ env.ASSET_NAME }}"
          # 윈도우 환경일 경우, 외부 도구 다운로드를 자동으로 수락하는 옵션을 추가해요.
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            NUITKA_ARGS="$NUITKA_ARGS --assume-yes-for-downloads"
          fi
          # 최종 인자로 Nuitka를 실행해요.
          python -m nuitka $NUITKA_ARGS app.py

      # 7. 빌드된 결과물을 아티팩트로 업로드해요.
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: build_output/${{ env.ASSET_NAME }}

  # 빌드된 파일들을 모아서 GitHub 릴리즈를 생성하는 잡이에요.
  release:
    name: Create GitHub Release
    needs: build # 'build' 잡이 모두 성공적으로 끝나야 실행돼요.
    runs-on: ubuntu-latest

    permissions:
      contents: write # 태그와 릴리즈를 생성하기 위해 권한이 필요해요.

    steps:
      # 1. 저장소의 코드를 가져와요. VERSION 파일을 읽기 위해 필요해요.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 'build' 잡에서 업로드한 모든 아티팩트들을 다운로드해요.
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_assets

      # 3. VERSION 파일에서 버전을 읽어와 태그 이름을 설정해요.
      - name: Get Version and Set Tag
        id: get_version
        run: |
          echo "TAG=v$(cat VERSION)" >> $GITHUB_ENV

      # 4. 만약 동일한 이름의 태그와 릴리즈가 이미 존재한다면 삭제해요.
      - name: Delete existing Tag and Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release delete ${{ env.TAG }} --cleanup-tag --yes || echo "Release ${{ env.TAG }} did not exist, creating a new one."

      # 5. 릴리즈 노트에 들어갈 내용을 파일로 생성해요.
      - name: Create Release Notes
        run: |
          VERSION=$(cat VERSION)
          cat <<EOF > release_notes.md
          ## 릴리즈 v${VERSION}

          안녕하세요! PyArmor와 Nuitka를 사용하여 안전하게 빌드된 실행 파일이에요.

          ### 실행 방법

          아래 안내에 따라 운영체제에 맞는 파일을 다운로드하고 실행해주세요.

          ---

          #### 윈도우 (Windows)
          - **파일**: \`app-${VERSION}-windows-latest.exe\`
          - **실행**:
            \`\`\`shell
            ./app-${VERSION}-windows-latest.exe
            \`\`\`

          ---

          #### 리눅스 (Linux/Ubuntu)
          - **파일**: \`app-${VERSION}-ubuntu-latest\`
          - **실행**:
            \`\`\`shell
            # 먼저 실행 권한을 부여해야 해요.
            chmod +x ./app-${VERSION}-ubuntu-latest

            # 파일을 실행해요.
            ./app-${VERSION}-ubuntu-latest
            \`\`\`

          ---

          #### 맥 (macOS - Apple Silicon)
          - **파일**: \`app-${VERSION}-macos-13\`
          - **실행**:
            \`\`\`shell
            # 먼저 실행 권한을 부여해야 해요.
            chmod +x ./app-${VERSION}-macos-13

            # 파일을 실행해요.
            ./app-${VERSION}-macos-13
            \`\`\`
          EOF

      # 6. GitHub 릴리즈를 생성하고 다운로드한 모든 빌드 결과물을 첨부해요.
      - name: Create GitHub Release and Upload Assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ env.TAG }} \
            --title "${{ env.TAG }} - 난독화 빌드" \
            --notes-file release_notes.md \
            release_assets/**/*
